#include <LiquidCrystal_I2C.h>
#include <Keypad.h>
#include <TM1637Display.h>
#include <Servo.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

int trigPin = 9;    // TRIG pin
int echoPin = 8;    // ECHO pin


float duration_us, distance_cm;


#define SCREEN_WIDTH 128 // OLED display width,  in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
Adafruit_SSD1306 oled(SCREEN_WIDTH, SCREEN_HEIGHT);

#define CLK 7
#define DIO 6
#define RED 53
#define YELLOW 51
#define GREEN 49
#define BUZZER 47

long duration;
int distance;

int potpin = 0;  // analog pin used to connect the potentiometer
int val, out;   // variable to read the value from the analog pin


TM1637Display display(CLK, DIO);
Servo myservo;


LiquidCrystal_I2C lcd(0x27, 20, 4);

const byte ROWS = 4; //4 baris
const byte COLS = 4; //4 kolom
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

byte colPins[COLS] = {31, 33, 35, 37}; // pin 2,3,4,5 untuk pin kolom keypad (lihat gambar)
byte rowPins[ROWS] = {23, 25, 27, 29}; // pin 6,7,8,9 untuk pin baris keypad (lihat gambar)
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );

int kondisi = 0, a = 0, b = 0, c = 0, d = 0, total = 0, e;

byte customChar[8] = {
  B001000,
  B000100,
  B000010,
  B111111,
  B000010,
  B000100,
  B001000,
  B000000
};

String inpass, password = "2222";

const unsigned char gearlogo [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfe, 0xfe, 0x01, 0xe0, 0x1f, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe0, 0x7e, 0x00, 0x00, 0x0f, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xf3, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xfe, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xf8, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0x80, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0x0d, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x07, 0xfc, 0x0f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0xf0, 0x0f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x07, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x3e, 0x78, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x30, 0x00, 0x60, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xc0, 0xfe, 0x03, 0xf8, 0x18, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfb, 0xfe, 0x07, 0xfe, 0xfe, 0x00, 0x07, 0xff, 0x00, 0x0f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xc0, 0x07, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xfd, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xe0, 0x07, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xf8, 0x3f, 0xff, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0xf0, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x7f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xce, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x7f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x04, 0x70, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x7f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x01, 0xfc, 0x00, 0x0f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xf8, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0xfe, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0xff, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0xfe, 0x00, 0x1f, 0xf0, 0xfc, 0x01, 0xfe, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xfc, 0x00, 0x1f, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xc0, 0x01, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xf0, 0xc0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char homelogo [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0xe0, 0xfc, 0x3f, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x7e, 0x3f, 0x83, 0xf0, 0x0f, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x7e, 0x3c, 0x0f, 0xc3, 0xc1, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x7e, 0x30, 0x7e, 0x0f, 0xf0, 0x7e, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x7e, 0x01, 0xf8, 0x3f, 0xfe, 0x1f, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x7e, 0x07, 0xc1, 0xff, 0xff, 0x83, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x78, 0x3f, 0x07, 0xff, 0xff, 0xe0, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x60, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x1f, 0x07, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x03, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0xc0, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x1f, 0x83, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xf8, 0x3f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xf0, 0x7c, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3e, 0x0f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xc1, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0x83, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xfe, 0x0f, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xf0, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xf8, 0x3e, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7c, 0x1f, 0xff, 0xff,
  0xff, 0xff, 0xe0, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0x07, 0xff, 0xff,
  0xff, 0xff, 0x87, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xe1, 0xff, 0xff,
  0xff, 0xff, 0x1f, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xf8, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char potensiooo [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0x00, 0x01, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x07, 0x00, 0x01, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 0x00, 0x01, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x07, 0x00, 0x01, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0x00, 0x01, 0xc0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x07, 0x00, 0x01, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x07, 0x00, 0x01, 0xc0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x07, 0x00, 0x01, 0xc0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x07, 0x00, 0x01, 0xc0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x07, 0x00, 0x01, 0xc0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x07, 0x00, 0x01, 0xc0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x07, 0x00, 0x01, 0xc0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x07, 0x00, 0x01, 0xc0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x07, 0x80, 0x03, 0xc0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x03, 0xe0, 0x07, 0x80, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x8f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe3, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x83, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc3, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xf0, 0x00, 0x00, 0x0f, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xf8, 0x07, 0xc0, 0x1f, 0x80, 0x07, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xf8, 0x0f, 0xe0, 0x3f, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xf8, 0x0f, 0xf0, 0x3f, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xf0, 0x0f, 0xf0, 0x1f, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xf0, 0x0f, 0xe0, 0x0f, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xe0, 0x0f, 0xe0, 0x0f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xc0, 0x0f, 0xf0, 0x07, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xc0, 0x0f, 0xf0, 0x03, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x80, 0x0f, 0xe0, 0x03, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xf0, 0x0f, 0xe0, 0x0e, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xf0, 0x1f, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xf0, 0x0f, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xf0, 0x0f, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xf0, 0x0f, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xc3, 0x87, 0xff, 0xf0, 0x0f, 0xff, 0xe1, 0x83, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x87, 0xc7, 0xff, 0xf0, 0x0f, 0xff, 0xc7, 0xe3, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x8f, 0xc7, 0xff, 0xf0, 0x0f, 0xff, 0xc7, 0xe3, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xc7, 0xc7, 0xff, 0xe0, 0x07, 0xff, 0xc3, 0xc3, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xc3, 0x87, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xc7, 0xe3, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xc7, 0xe3, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

void setup() {

  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  // put your setup code here, to run once:
  lcd.begin(20, 4);
  lcd.init();
  lcd.backlight();
  lcd.setCursor(6, 1);
  lcd.print("WELCOME");
  char key = keypad.getKey();
  lcd.setCursor (5, 2);
  oled.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  oled.clearDisplay(); //clear sebelum tampilan baru
  oled.drawBitmap(0, 0, gearlogo, 128, 64, WHITE);
  oled.display(); //tampilkan data
  //delay (2000);
  //for (int f = 0; f < 3; f++)
  {
    digitalWrite(53, HIGH);
    digitalWrite(51, LOW);
    digitalWrite(49, LOW);
    digitalWrite(47, HIGH);
    delay(500);
    digitalWrite(53, LOW);
    digitalWrite(51, LOW);
    digitalWrite(49, LOW);
    digitalWrite(47, LOW);
    delay(500);
    digitalWrite(53, LOW);
    digitalWrite(51, HIGH);
    digitalWrite(49, LOW);
    digitalWrite(47, HIGH);
    delay(500);
    digitalWrite(53, LOW);
    digitalWrite(51, LOW);
    digitalWrite(49, LOW);
    digitalWrite(47, LOW);
    delay(500);
    digitalWrite(53, LOW);
    digitalWrite(51, LOW);
    digitalWrite(49, HIGH);
    digitalWrite(47, HIGH);
    delay(500);
    digitalWrite(53, LOW);
    digitalWrite(51, LOW);
    digitalWrite(49, LOW);
    digitalWrite(47, LOW);
    delay(500);
    digitalWrite(53, LOW);
    digitalWrite(51, LOW);
    digitalWrite(49, LOW);
    digitalWrite(47, HIGH);
    delay(500);
    digitalWrite(53, LOW);
    digitalWrite(51, LOW);
    digitalWrite(49, LOW);
    digitalWrite(47, LOW);
    delay(1500);

  }
  lcd.clear();
  kondisi = 2;

  myservo.attach(5);

  //SEVENSEGMENT TM1637
  display.showNumberDec(0, true);
  total = 0000;
  display.setBrightness(4);

  pinMode(53, OUTPUT);
  pinMode(51, OUTPUT);
  pinMode(49, OUTPUT);
  pinMode(47, OUTPUT);

}

void loop() {
  // put your main code here, to run repeatedly:
  while (kondisi == 5)
  {
    char key = keypad.getKey();
    lcd.setCursor (0, 0);
    lcd.print("INPUT PASSWORD :");
    if (key)
    {
      if (key != 'A' && key != 'B' && key != 'C' && key != 'D' && key != '*' && key != '#')
      {
        if (key == '0')
        {
          a = b;
          b = c;
          c = d;
          d = 0;
          total = (a * 1000) + (b * 100) + (c * 10) + d;
        }
        else if (key == '1')
        {
          a = b;
          b = c;
          c = d;
          d = 1;
          total = (a * 1000) + (b * 100) + (c * 10) + d;
        }
        else if (key == '2')
        {
          a = b;
          b = c;
          c = d;
          d = 2;
          total = (a * 1000) + (b * 100) + (c * 10) + d;
        }
        else if (key == '3')
        {
          a = b;
          b = c;
          c = d;
          d = 3;
          total = (a * 1000) + (b * 100) + (c * 10) + d;
        }
        else if (key == '4')
        {
          a = b;
          b = c;
          c = d;
          d = 4;
          total = (a * 1000) + (b * 100) + (c * 10) + d;
        }
        else if (key == '5')
        {
          a = b;
          b = c;
          c = d;
          d = 5;
          total = (a * 1000) + (b * 100) + (c * 10) + d;
        }
        else if (key == '6')
        {
          a = b;
          b = c;
          c = d;
          d = 6;
          total = (a * 1000) + (b * 100) + (c * 10) + d;
        }
        else if (key == '7')
        {
          a = b;
          b = c;
          c = d;
          d = 7;
          total = (a * 1000) + (b * 100) + (c * 10) + d;
        }
        else if (key == '8')
        {
          a = b;
          b = c;
          c = d;
          d = 8;
          total = (a * 1000) + (b * 100) + (c * 10) + d;
        }
        else if (key == '9')
        {
          a = b;
          b = c;
          c = d;
          d = 9;
          total = (a * 1000) + (b * 100) + (c * 10) + d;
        }

        inpass += key;
        /*e++;
          if (e>4)
          {
          total=0;
          inpass="";
          }*/
      }
      else if (key == 'C')
      {
        a = b = c = d = total = 0;
        inpass = "";
      }
      else if (key == 'A')
      {

        kondisi = 6;
        lcd.clear();
      }
    }
    display.showNumberDec(total, true);
  }

  while (kondisi == 6 )
  {
    if (inpass == password)
    {
      lcd.setCursor (0, 0);
      lcd.print("PASSWORD BENAR");
      a = b = c = d = total = 0;
      inpass = "";
      display.showNumberDec(total, true);
      delay (1000);
      kondisi = 7;
      lcd.clear();
    }
    else
    {
      lcd.setCursor (0, 0);
      lcd.print("PASSWORD SALAH !!!");
      a = b = c = d = total = 0;
      inpass = "";
      delay (1000);
      kondisi = 5;
      lcd.clear();
    }
  }

  while (kondisi == 2)
  {
    char key = keypad.getKey();

    lcd.setCursor (0, 0);
    lcd.print("MENU PILIHAN :");
    lcd.setCursor (0, 1);
    lcd.print("1. POTENSIO");
    lcd.setCursor (0, 2);
    lcd.print("2. ultrasonik");
    lcd.setCursor (0, 3);
    lcd.print("3. timer");
    oled.begin(SSD1306_SWITCHCAPVCC, 0x3C);
    oled.clearDisplay(); //clear sebelum tampilan baru
    oled.drawBitmap(0, 0, homelogo, 128, 64, WHITE);
    oled.display(); //tampi

    if (key == 'A')
    {
      kondisi = 4;
      lcd.clear();
    }
    else if (key == 'B')
    {
      lcd.clear();
      kondisi = 3;
    }
    else if (key == 'C')
    {
      lcd.clear();
      kondisi = 5;
    }
    else if (key == '4')
    {
      lcd.clear();
      kondisi = 6;
    }
    else if (key == '5')
    {
      lcd.clear();
      kondisi = 7;
    }
    else if (key == '6')
    {
      lcd.clear();
      kondisi = 8;
    }

  }

  while (kondisi == 3)
  {
    char key = keypad.getKey();

    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);

    // measure duration of pulse from ECHO pin
    duration_us = pulseIn(echoPin, HIGH);

    // calculate the distance
    distance_cm = 0.017 * duration_us;

    // print the value to Serial Monitor
    lcd.setCursor(0, 0);
    lcd.print("Ultrasonic");
    lcd.setCursor(1, 1);
    lcd.print("distance: ");
    lcd.setCursor(11, 1);
    lcd.print(distance_cm);
    lcd.println(" cm");
    lcd.setCursor(0, 2);
    lcd.print("Status : ");

    if (distance_cm <= 10 ) {
      lcd.setCursor(10, 2);
      lcd.print("bahaya!");
    }
    else {
     lcd.setCursor(10, 2);
      lcd.print("aman");
    }
    lcd.createChar(0, customChar); // create a new custom character

  lcd.setCursor(0, 1); // move cursor to (2, 0)
  lcd.write((byte)0); 
  lcd.setCursor(0, 3); // move cursor to (2, 0)
  lcd.write((byte)0);
  lcd.setCursor(1, 3); // move cursor to (2, 0)
  lcd.write((byte)0);
  lcd.setCursor(2, 3); // move cursor to (2, 0)
  lcd.write((byte)0); // print the custom char at (2, 0)
    if (key == '#') //sesuai soal
    {
      lcd.clear();
      kondisi = 2;
    }
  }



  while (kondisi == 4)
  {
    char key = keypad.getKey();
    lcd.clear();
    val = analogRead(potpin);            // reads the value of the potentiometer (value between 0 and 1023)
    out = map(val, 0, 1023, 0, 100);     // scale it to use it with the servo (value between 0 and 180)
    lcd.setCursor (0, 0);
    lcd.print("POTENSIO");
    lcd.setCursor (0, 2);
    lcd.print("ANALOG:");
    lcd.setCursor (7, 2);
    lcd.print(val);
    lcd.setCursor (0, 3);
    lcd.print("PERSEN:");
    lcd.setCursor (7, 3);
    lcd.print(out);
    oled.begin(SSD1306_SWITCHCAPVCC, 0x3C);
    oled.clearDisplay(); //clear sebelum tampilan baru
    oled.drawBitmap(0, 0, potensiooo, 128, 64, WHITE);
    oled.display(); //tampi
    if (key == '#')
    {
      lcd.clear();
      kondisi = 2;
    }
    delay(100);
  }
  while (kondisi == 6)
  {
    char key = keypad.getKey();
    lcd.setCursor (5, 2);
    lcd.print("C. UP");
    int i;
    for (i = 0; i < 20 ; i++) {
      display.showNumberDec(i);
      delay(500);
      display.clear();
    }
    if (key == '*')
    {
      lcd.clear();
      kondisi = 2;
    }

  }
  while (kondisi == 7)
  {
    char key = keypad.getKey();
    lcd.setCursor (5, 2);
    lcd.print("C.DOWN");
    int i;
    for (i = 9999; i >= 0 ; i--) {
      display.showNumberDec(i);
      delay(500);
      display.clear();
      if (key == 'A')
      {
        i = 100;
        display.showNumberDec(0, true);
        lcd.clear();
        kondisi = 2;
        break;
      }
    }


    while (kondisi == 8)
    {
      char key = keypad.getKey();

      lcd.setCursor (0, 0);
      lcd.print("BUZZER AKTIF");
      digitalWrite(47, HIGH);
      if (key == '*')
      {
        lcd.clear();
        kondisi = 2;
      }
    }
  }
}


https://bigimage.11zon.com/en/image-resize/image-resolution-changer.php
https://javl.github.io/image2cpp/
https://wokwi.com/projects/366076139928414209
https://arduinogetstarted.com/tutorials/arduino-tm1637-4-digit-7-segment-display
